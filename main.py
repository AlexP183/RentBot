import os
import logging
from datetime import datetime, timezone
from zoneinfo import ZoneInfo
from dotenv import load_dotenv

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, filters, ContextTypes
)

from sqlalchemy import create_engine, Column, Integer, String, DateTime, desc
from sqlalchemy.orm import sessionmaker, declarative_base

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
TIMEZONE = os.getenv("TIMEZONE", "Europe/Samara")
PRICE_FILE_PATH = os.getenv("PRICE_FILE_PATH", "files/price.pdf")
CONTRACT_FILE_PATH = os.getenv("CONTRACT_FILE_PATH", "files/contract.pdf")
PRICE_URL = os.getenv("PRICE_URL")
CONTRACT_URL = os.getenv("CONTRACT_URL")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env")

tz = ZoneInfo(TIMEZONE)

# ---------- –ë–î ----------
Base = declarative_base()
engine = create_engine("sqlite:///bot.db")
SessionLocal = sessionmaker(bind=engine)


class Reminder(Base):
    __tablename__ = "reminders"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    chat_id = Column(Integer, nullable=False)
    due_at = Column(DateTime(timezone=True), nullable=False)
    note = Column(String, default="–í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")


class Review(Base):
    __tablename__ = "reviews"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, index=True, nullable=False)
    user_name = Column(String, default="")
    text = Column(String, nullable=False)
    created_at = Column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))


Base.metadata.create_all(engine)

# ---------- –°—Ç–µ–π—Ç—ã ----------
ASK_DATETIME, ASK_NOTE, ASK_REVIEW_TEXT = range(3)


# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –ü—Ä–∞–π—Å", callback_data="show_price"),
         InlineKeyboardButton("ÔøΩÔøΩ –î–æ–≥–æ–≤–æ—Ä", callback_data="show_contract")],
        [InlineKeyboardButton("üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")],
        [InlineKeyboardButton("üí¨ –û—Ç–∑—ã–≤—ã", callback_data="reviews")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üõ†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω–¥—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ ÔøΩÔøΩ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–π—Å\n"
        "‚Ä¢ üìù –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–≥–æ–≤–æ—Ä–æ–º\n"
        "‚Ä¢ ÔøΩÔøΩ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        "‚Ä¢ ‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ\n"
        "‚Ä¢ ÔøΩÔøΩ –ß–∏—Ç–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=main_menu_keyboard())
    else:
        await update.callback_query.message.reply_text(text, reply_markup=main_menu_keyboard())


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/price ‚Äî –ø—Ä–∞–π—Å\n"
        "/contract ‚Äî –¥–æ–≥–æ–≤–æ—Ä\n"
        "/contacts ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "/reminder ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/reviews ‚Äî –æ—Ç–∑—ã–≤—ã\n\n"
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú¬ª\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025 18:30"
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled exception: %s", context.error)


async def send_document_by_path_or_url(update_obj, context, path, url, caption):
    chat_id = update_obj.effective_chat.id
    if url:
        await context.bot.send_message(chat_id, f"{caption}\n{url}")
        return
    if path and os.path.exists(path):
        with open(path, "rb") as f:
            await context.bot.send_document(chat_id, document=InputFile(f, filename=os.path.basename(path)),
                                            caption=caption)
    else:
        await context.bot.send_message(chat_id, "–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–¥–∞–π—Ç–µ URL –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.")


async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data

    if data == "show_price":
        await q.answer()
        await send_document_by_path_or_url(update, context, PRICE_FILE_PATH, PRICE_URL, "üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å:")

    elif data == "show_contract":
        await q.answer()
        await send_document_by_path_or_url(update, context, CONTRACT_FILE_PATH, CONTRACT_URL, "ÔøΩÔøΩ –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã:")

    elif data == "show_contacts":
        await q.answer()
        # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∞–¥—Ä–µ—Å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        phone_number = "+79536353102"
        address = "–≥.–ú–∞—Ä–∫—Å, —É–ª. 2-—è –°–æ—Å–Ω–æ–≤–∞—è, –¥. 12"
        address_url = "https://maps.google.com/?q=–≥.–ú–∞—Ä–∫—Å, —É–ª. 2-—è –°–æ—Å–Ω–æ–≤–∞—è, –¥. 12"

        contacts_text = (
            "ÔøΩÔøΩ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: [{phone_number}](tel:{phone_number})\n"
            f"üìß WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/79536353102)\n\n"
            "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n"
            "–ü–Ω-–ü—Ç: 8:00 - 18:00\n"
            "–°–±: 9:00 - 16:00\n"
            "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
            f"üìç –ê–¥—Ä–µ—Å: [{address}]({address_url})\n\n"
            "ÔøΩÔøΩ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–µ"
        )
        await q.message.reply_text(
            contacts_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

    elif data == "set_reminder":
        await q.answer()
        await q.message.reply_text(
            "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025 18:30\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ASK_DATETIME

    elif data == "reviews":
        await q.answer()
        await show_reviews(update, context)

    elif data == "help":
        await help_cmd(update, context)


# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----------
def parse_datetime_local(s: str) -> datetime | None:
    s = " ".join(s.split())
    try:
        dt_local = datetime.strptime(s, "%d.%m.%Y %H:%M")
        return dt_local.replace(tzinfo=tz)
    except Exception:
        return None


async def ask_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text == "-":
        await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    dt_local = parse_datetime_local(text)
    if not dt_local:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025 18:30\n\n"
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ASK_DATETIME

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    now = datetime.now(tz)
    if dt_local <= now:
        await update.message.reply_text(
            "‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n\n"
            "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ASK_DATETIME

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É
    context.user_data["reminder_datetime"] = dt_local
    await update.message.reply_text(
        "‚úÖ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä Bosch¬ª)\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    return ASK_NOTE


async def ask_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    note = update.message.text.strip()
    if note == "-":
        note = "–í–æ–∑–≤—Ä–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"

    dt_local = context.user_data.get("reminder_datetime")
    dt_utc = dt_local.astimezone(timezone.utc)

    with SessionLocal() as db:
        reminder = Reminder(
            user_id=update.effective_user.id,
            chat_id=update.effective_chat.id,
            due_at=dt_utc,
            note=note,
        )
        db.add(reminder)
        db.commit()
        reminder_id = reminder.id

    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ID {reminder_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id} –Ω–∞ {dt_utc}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    context.job_queue.run_once(
        callback=notify_user,
        when=dt_utc,
        name=f"reminder_{reminder_id}",
        data={"user_id": update.effective_user.id, "chat_id": update.effective_chat.id, "note": note}
    )

    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"‚è∞ –í—Ä–µ–º—è: {dt_local.strftime('%d.%m.%Y %H:%M')} ({TIMEZONE})\n"
        f"üìù –ó–∞–º–µ—Ç–∫–∞: {note}\n\n"
        f"–Ø –í–∞—Å –æ–ø–æ–≤–µ—â—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END


async def notify_user(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    note = data["note"]
    user_id = data["user_id"]

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ —á–∞—Ç {chat_id}: {note}")

    try:
        await context.bot.send_message(
            chat_id,
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞!\n\n"
            f"üìù {note}\n\n"
            f"–ü–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! üõ†Ô∏è"
        )
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END


# ---------- –û—Ç–∑—ã–≤—ã ----------
async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE, limit: int = 10):
    with SessionLocal() as db:
        items = db.query(Review).order_by(desc(Review.created_at)).limit(limit).all()

    if not items:
        await update.effective_message.reply_text(
            "ÔøΩÔøΩ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–π!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="review_add")]])
        )
        return

    lines = []
    for r in items:
        name = r.user_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        dt_local = r.created_at.astimezone(tz)
        lines.append(f"üí¨ {r.text}\n  üë§ {name}, {dt_local.strftime('%d.%m.%Y %H:%M')}")
    text = "ÔøΩÔøΩ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n" + "\n\n".join(lines)

    await update.effective_message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="review_add")]])
    )


async def ask_review_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, —É–¥–æ–±—Å—Ç–≤–µ –∞—Ä–µ–Ω–¥—ã.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    return ASK_REVIEW_TEXT


async def ask_review_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ /cancel.")
        return ASK_REVIEW_TEXT

    user = update.effective_user
    user_name = user.full_name or (user.username and f"@{user.username}") or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    with SessionLocal() as db:
        db.add(Review(
            user_id=user.id,
            user_name=user_name,
            text=text,
            created_at=datetime.now(timezone.utc),
        ))
        db.commit()

    await update.message.reply_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞! üôè",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def cmd_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_document_by_path_or_url(update, context, PRICE_FILE_PATH, PRICE_URL, "ÔøΩÔøΩ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å:")


async def cmd_contract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_document_by_path_or_url(update, context, CONTRACT_FILE_PATH, CONTRACT_URL, "üìù –î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã:")


async def cmd_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = "+79536353102"
    address = "–≥.–ú–∞—Ä–∫—Å, —É–ª. 2-—è –°–æ—Å–Ω–æ–≤–∞—è, –¥. 12"
    address_url = "https://maps.google.com/?q=–≥.–ú–∞—Ä–∫—Å, —É–ª. 2-—è –°–æ—Å–Ω–æ–≤–∞—è, –¥. 12"

    contacts_text = (
        "ÔøΩÔøΩ –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: [{phone_number}](tel:{phone_number})\n"
        f"üìß WhatsApp: [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/79536353102)\n\n"
        "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n"
        "–ü–Ω-–ü—Ç: 8:00 - 18:00\n"
        "–°–±: 9:00 - 16:00\n"
        "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
        f"üìç –ê–¥—Ä–µ—Å: [{address}]({address_url})\n\n"
        "ÔøΩÔøΩ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–µ"
    )
    await update.message.reply_text(
        contacts_text,
        parse_mode='Markdown',
        disable_web_page_preview=True
    )


async def cmd_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025 18:30\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return ASK_DATETIME


async def cmd_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_reviews(update, context)


# ---------- Main ----------
def build_application() -> Application:
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_error_handler(error_handler)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", start))
    app.add_handler(CommandHandler("price", cmd_price))
    app.add_handler(CommandHandler("contract", cmd_contract))
    app.add_handler(CommandHandler("contacts", cmd_contacts))
    app.add_handler(CommandHandler("reminder", cmd_reminder))
    app.add_handler(CommandHandler("reviews", cmd_reviews))

    app.add_handler(
        CallbackQueryHandler(on_button, pattern="^(show_price|show_contract|show_contacts|set_reminder|reviews)$"))
    app.add_handler(CallbackQueryHandler(ask_review_start, pattern="^review_add$"))

    conv_reminder = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(on_button, pattern="^set_reminder$"),
            CommandHandler("reminder", cmd_reminder)
        ],
        states={
            ASK_DATETIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_datetime)],
            ASK_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_note)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_message=False,
    )
    app.add_handler(conv_reminder)

    conv_reviews = ConversationHandler(
        entry_points=[CallbackQueryHandler(ask_review_start, pattern="^review_add$")],
        states={
            ASK_REVIEW_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_review_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        per_message=False,
    )
    app.add_handler(conv_reviews)

    return app


if __name__ == "__main__":
    application = build_application()
    application.run_polling(allowed_updates=Update.ALL_TYPES)